// ========================== form_out.js (FULL) ==========================

// ===== Cancel guard helpers (global) =====
let __IS_CANCELED__ = false;

function setFormDisabled(disabled) {
  const form = document.querySelector("form");
  if (!form) return;

  const submitBtn = form.querySelector("button[type='submit']");
  if (submitBtn) submitBtn.disabled = disabled;

  const addBtn = document.querySelector(".add-row");
  if (addBtn) addBtn.disabled = disabled;

  // ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á "‡∏Ñ‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠" ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Cancel
  const keepEnabledNames = new Set(["repair"]); // üëà ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å

  form.querySelectorAll("input, select, textarea, button.remove-row").forEach((el) => {
    if (el === submitBtn) return;                 // ‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏° submit (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    if (keepEnabledNames.has(el.name)) {          // üëà ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏ä‡πà‡∏≠‡∏á repair
      el.disabled = false;
      return;
    }
    el.disabled = disabled;                       // ‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
  });

  // Select2 ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô jQuery
  try {
    $("#requesterName").prop("disabled", disabled).trigger("change.select2");
  } catch (e) {}
}


function updateCancelUI(isCanceled /*, requestId */) {
  __IS_CANCELED__ = !!isCanceled;
  const banner = document.getElementById("status-banner");

  if (__IS_CANCELED__) {
    if (banner) {
      banner.className = "alert alert-danger mt-2";
      banner.innerHTML = '‡πÉ‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å <b>Cancel</b> ‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ OUT ‡πÑ‡∏î‡πâ';
    }
    setFormDisabled(true);
  } else {
    if (banner) {
      banner.className = "alert d-none mt-2";
      banner.innerHTML = "";
    }
    setFormDisabled(false);
  }
}

// ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° option ‡πÉ‡∏´‡πâ select ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö "Cancel")
function ensureStatusOptionAndSelect(selectEl, status) {
  if (!selectEl) return;
  const exists = Array.from(selectEl.options).some((o) => o.value === status);
  if (!exists) {
    const opt = new Option(status, status);
    if (status === "Cancel") opt.disabled = true; // ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏´‡πâ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
    selectEl.add(opt);
  }
  selectEl.value = status;
}

document.addEventListener("DOMContentLoaded", function () {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
  function updateRemoveButtons() {
    const rows = document.querySelectorAll("table tbody tr");
    const removeButtons = document.querySelectorAll(".remove-row");
    removeButtons.forEach((button) => {
      button.style.display = rows.length > 1 ? "inline-block" : "none";
    });
  }

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å SKU
  document.addEventListener("input", function (event) {
    if (event.target.classList.contains("sku-input")) {
      const sku = event.target.value.trim();
      const row = event.target.closest("tr");
      const descriptionCell = row.querySelector(".description-cell");
      const costCell = row.querySelector(".cost-cell");

      if (sku) {
        fetch(`/get-product-details?sku=${sku}`)
          .then((response) => response.json())
          .then((data) => {
            if (data && data.product) {
              descriptionCell.textContent = data.product.description || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
              descriptionCell.classList.remove("text-danger");
              descriptionCell.classList.add("text-dark");
              costCell.classList.remove("text-danger");
              costCell.classList.add("text-dark");
              costCell.textContent =
                new Intl.NumberFormat().format(data.product.cost) || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
            } else {
              descriptionCell.textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SKU";
              descriptionCell.classList.remove("text-dark");
              descriptionCell.classList.add("text-danger");
              costCell.textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
              costCell.classList.remove("text-dark");
              costCell.classList.add("text-danger");
            }
          })
          .catch((error) => {
            console.error("Error fetching product details:", error);
            descriptionCell.textContent = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î";
            descriptionCell.classList.add("text-danger");
            costCell.textContent = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î";
          });
      } else {
        descriptionCell.textContent = "";
        descriptionCell.classList.remove("text-danger", "text-dark");
        costCell.textContent = "";
      }
    }
  });

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å storeId
  const storeIdInput = document.getElementById("storeId");
  const storenameInput = document.getElementById("storename");

  storeIdInput.addEventListener("input", async function () {
    const storeId = storeIdInput.value.trim();
    storenameInput.value = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô

    if (!storeId) {
      storenameInput.classList.remove("text-danger");
      return;
    }

    try {
      const response = await fetch(`/get-store-name?storeId=${storeId}`);
      const data = await response.json();

      if (response.ok && data.storename) {
        storenameInput.value = data.storename;
        storenameInput.classList.remove("text-danger");
      } else {
        storenameInput.value = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
        storenameInput.classList.add("text-danger");
      }
    } catch (error) {
      console.error("Error fetching store name:", error);
      storenameInput.value = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î";
      storenameInput.classList.add("text-danger");
    }
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß
  document.querySelector(".add-row").addEventListener("click", function () {
    if (__IS_CANCELED__) return; // ‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ Cancel
    const tableBody = document.querySelector("table tbody");
    const newRow = `
      <tr>
        <td><input type="text" class="form-control sku-input" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" name="sku" required></td>
        <td class="text-start align-middle description-cell"></td>
        <td><input type="number" class="form-control text-center" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" name="quantity" value="1" required></td>
        <td class="text-center align-middle cost-cell"></td>
        <td class="text-center"><button type="button" class="btn btn-danger btn-sm remove-row">‡∏•‡∏ö</button></td>
      </tr>`;
    tableBody.insertAdjacentHTML("beforeend", newRow);
    updateRemoveButtons();
  });

  // ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß
  document.addEventListener("click", function (event) {
    if (event.target.classList.contains("remove-row")) {
      if (__IS_CANCELED__) return; // ‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ Cancel
      event.target.closest("tr").remove();
      updateRemoveButtons();
    }
  });

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  updateRemoveButtons();

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  const repairInput = document.querySelector('[name="repair"]');
  const nameInput = document.querySelector('[name="name"]');
  const workStatusInput = document.querySelector('[name="workStatus"]');
  const storeIdInputField = document.querySelector('[name="storeId"]');
  const storenameInputField = document.getElementById("storename");

  const repairHistorySection = document.getElementById("repair-history-section");
  const transactionTableBody = document.querySelector("#transaction-table tbody");
  const summaryTableBody = document.querySelector("#summary-table tbody");

  repairInput.addEventListener("input", async function () {
    const repair = repairInput.value.trim();

    if (!repair) {
      nameInput.value = "";
      $("#requesterName").val(null).trigger("change");
      workStatusInput.value = "Pending";
      storeIdInputField.value = "";
      storenameInputField.value = "";
      if (repairHistorySection) repairHistorySection.classList.add("d-none");
      updateCancelUI(false);
      return;
    }

    try {
      const response = await fetch(`/get-transaction-details?repair=${encodeURIComponent(repair)}`);
      const data = await response.json();

      if (response.ok && data.transaction) {
        // ===== Prefill requesterName ‡πÉ‡∏´‡πâ Select2 =====
        const selectedName = (data.transaction.requesterName || '').trim();
        nameInput.value = selectedName;

        const $sel = $('#requesterName');
        if (selectedName) {
          const hasOption = $sel.find(`option[value="${selectedName.replace(/"/g, '\\"')}"]`).length > 0;
          if (!hasOption) {
            $sel.append(new Option(selectedName, selectedName, true, true)).trigger('change');
          } else {
            $sel.val(selectedName).trigger('change');
          }
        } else {
          $sel.val(null).trigger('change');
        }
        // =============================================

        const status = data.transaction.workStatus || 'Pending';
        if (status.toLowerCase() === 'cancel') {
          ensureStatusOptionAndSelect(workStatusInput, 'Cancel');
          updateCancelUI(true);
        } else {
          workStatusInput.value = status;
          updateCancelUI(false);
        }

        storeIdInputField.value = data.transaction.storeId ?? '';
        storenameInputField.value = data.transaction.storeName || '';

        // ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡∏≤‡∏° storeId
        storeIdInputField.dispatchEvent(new Event('input'));
      } else {
        nameInput.value = '';
        $('#requesterName').val(null).trigger('change');
        workStatusInput.value = 'Pending';
        storeIdInputField.value = '';
        storenameInputField.value = '';
        updateCancelUI(false);
      }

      await loadRepairHistory(repair);
    } catch (error) {
      console.error('Error fetching transaction details:', error);
      nameInput.value = '';
      $('#requesterName').val(null).trigger('change');
      workStatusInput.value = '';
      storeIdInputField.value = '';
      storenameInputField.value = '';
      if (repairHistorySection) repairHistorySection.classList.add('d-none');
      updateCancelUI(false);
    }
  });

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transaction ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡πÄ‡∏•‡∏Ç repair ‡∏ã‡πâ‡∏≥
  async function loadRepairHistory(repair) {
    try {
      const response = await fetch(`/get-transactions-summary?repair=${repair}`);
      const data = await response.json();

      if (response.ok && data.transactions && data.transactions.length > 0) {
        if (repairHistorySection) repairHistorySection.classList.remove("d-none");
        if (transactionTableBody) transactionTableBody.innerHTML = "";
        if (summaryTableBody) summaryTableBody.innerHTML = "";

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô workStatus = Cancel ‡πÉ‡∏´‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ + set select ‡πÄ‡∏õ‡πá‡∏ô Cancel
        const anyCanceled = data.transactions.some(
          (tx) => (tx.workStatus || "").toLowerCase() === "cancel"
        );
        if (anyCanceled) {
          ensureStatusOptionAndSelect(workStatusInput, "Cancel");
          updateCancelUI(true);
        }

        // --- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Transaction
        let count = 1;
        data.transactions.forEach((transaction) => {
          const createdAt = dayjs(transaction.createdAt)
            .tz("Asia/Bangkok")
            .format("DD MMM YYYY, HH:mm");

          transaction.products.forEach((product, index) => {
            const tr = document.createElement("tr");
            tr.innerHTML = `
              <td class="text-center">${index === 0 ? count : ""}</td>
              <td class="text-center">${product.sku}</td>
              <td>${product.description || ""}</td>
              <td class="text-center">${product.quantity}</td>
              <td class="text-center">${transaction.transactionType}</td>
              <td class="text-center">${createdAt}</td>
            `;
            if (transactionTableBody) transactionTableBody.appendChild(tr);
          });

          count++;
        });

        // --- ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î (Summary)
        const summary = {};
        data.transactions.forEach((tr) => {
          tr.products.forEach((p) => {
            if (!summary[p.sku]) {
              summary[p.sku] = {
                description: p.description || "",
                net: 0,
              };
            }
            summary[p.sku].net += tr.transactionType === "IN" ? p.quantity : -p.quantity;
          });
        });

        let summaryIndex = 1;
        for (const sku in summary) {
          const tr = document.createElement("tr");
          tr.innerHTML = `
            <td class="text-center">${summaryIndex++}</td>
            <td class="text-center">${sku}</td>
            <td>${summary[sku].description}</td>
            <td class="text-center">${summary[sku].net}</td>
          `;
          if (summaryTableBody) summaryTableBody.appendChild(tr);
        }
      } else {
        if (repairHistorySection) repairHistorySection.classList.add("d-none");
      }
    } catch (error) {
      console.error("Error loading repair history:", error);
      if (repairHistorySection) repairHistorySection.classList.add("d-none");
    }
  }

  // ===== Submit (‡∏Å‡∏±‡∏ô Cancel + ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•) =====
  const theForm = document.querySelector("form");
  if (theForm) {
    theForm.addEventListener("submit", function (event) {
      event.preventDefault();

      const alertContainer = document.getElementById("alert-container");

      // ‚õî ‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™ Cancel ‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏ß‡∏£‡πå ‡πÜ
      if (__IS_CANCELED__) {
        alertContainer.innerHTML = `<div class="alert alert-danger alert-dismissible fade show" role="alert">
          ‡πÉ‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å <b>Cancel</b> ‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ OUT ‡πÑ‡∏î‡πâ
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>`;
        return;
      }

      const submitButton = this.querySelector('button[type="submit"]');
      submitButton.disabled = true;
      submitButton.innerHTML = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...";

      const name = document.querySelector('[name="name"]').value.trim();
      const repair = document.querySelector('[name="repair"]').value.trim();
      const workStatus = document.querySelector('[name="workStatus"]').value;
      const storeId = document.querySelector('[name="storeId"]').value.trim();

      const products = Array.from(document.querySelectorAll("table tbody tr"))
        .map((row) => {
          const skuEl = row.querySelector(".sku-input");
          const descEl = row.querySelector(".description-cell");
          const qtyEl = row.querySelector('[name="quantity"]');
          const costEl = row.querySelector(".cost-cell");
          if (!skuEl || !descEl || !qtyEl || !costEl) return null;
          return {
            sku: skuEl.value.trim(),
            description: descEl.textContent.trim(),
            quantity: parseInt(qtyEl.value, 10),
            cost: parseFloat(costEl.textContent.replace(/,/g, "")) || 0,
          };
        })
        .filter(Boolean);

      fetch("/add_trans-out", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, repair, workStatus, storeId, products }),
      })
        .then(async (response) => {
          const data = await response.json();

          if (!response.ok) {
            throw data;
          }

          alertContainer.innerHTML = `<div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</strong> ${data.message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          </div>`;
          setTimeout(() => window.location.reload(), 2500);
        })
        .catch((error) => {
          console.error("Error saving:", error);
          submitButton.disabled = false;
          submitButton.innerHTML = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";

          alertContainer.innerHTML = `<div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!</strong> ${error.alert || error.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          </div>`;
        });
    });
  }

  // === ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SKU ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° OUT ‚Äî UI ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô + ‡∏Ñ‡∏∏‡∏°‡∏õ‡∏∏‡πà‡∏° submit ===
  (function () {
    function validateDuplicateSkusOUT() {
      const rows = Array.from(document.querySelectorAll("table.form_out tbody tr"));
      const submitBtn = document.querySelector('button[type="submit"]');
      const alertContainer =
        document.getElementById("alert-container") ||
        (() => {
          const div = document.createElement("div");
          div.id = "alert-container";
          const form = document.querySelector("form") || document.body;
          form.parentNode.insertBefore(div, form.nextSibling);
          return div;
        })();

      const seen = new Set();
      const dups = new Set();

      rows.forEach((row) => {
        const inp = row.querySelector(".sku-input");
        const val = (inp?.value || "").trim().toUpperCase();
        if (!val) return;
        if (seen.has(val)) dups.add(val);
        else seen.add(val);
      });

      // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
      rows.forEach((row) => {
        const inp = row.querySelector(".sku-input");
        const v = (inp?.value || "").trim().toUpperCase();
        row.classList.remove("table-danger");
        inp?.classList.remove("is-invalid");
        if (v && dups.has(v)) {
          row.classList.add("table-danger");
          inp?.classList.add("is-invalid");
        }
      });

      if (submitBtn) {
        if (dups.size > 0) {
          submitBtn.disabled = true;
        } else {
          // ‡∏≠‡∏¢‡πà‡∏≤ enable ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ö‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å Cancel
          submitBtn.disabled = __IS_CANCELED__ ? true : false;
        }
      }

      if (dups.size > 0) {
        alertContainer.innerHTML = `
          <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥:</strong> ${[...dups].join(", ")} ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏•‡∏∞ 1 ‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          </div>`;
        return false;
      } else {
        return true;
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå/‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß
    document.addEventListener("input", (e) => {
      if (e.target.classList.contains("sku-input")) validateDuplicateSkusOUT();
    });
    document.addEventListener("click", (e) => {
      if (e.target.classList.contains("add-row") || e.target.classList.contains("remove-row")) {
        setTimeout(validateDuplicateSkusOUT, 0);
      }
    });

    // ‡∏Å‡∏±‡∏ô‡∏ï‡∏≠‡∏ô submit ‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
    const formEl =
      document.querySelector("form[action='/add_trans-out']") ||
      document.querySelector("form");
    if (formEl) {
      formEl.addEventListener("submit", (e) => {
        if (!validateDuplicateSkusOUT()) {
          e.preventDefault();
          e.stopPropagation();
        }
      });
    }
  })();
});
