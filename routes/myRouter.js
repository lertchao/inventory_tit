const express = require('express')
const router = express.Router()
const Product = require('../models/products')
const Transaction = require('../models/transaction')
const Store = require('../models/store')
const fs = require('fs');
const path = require('path');
const { cloudinary, upload } = require('../config/cloudinary');

const { isAuthenticated, isAdmin } = require("../middleware/auth")
const bcrypt = require("bcrypt")
const User = require("../models/user")

const dayjs = require('dayjs');
const utc = require('dayjs/plugin/utc');
const timezone = require('dayjs/plugin/timezone');

dayjs.extend(utc);
dayjs.extend(timezone);


router.get("/register",(req, res) => {
  res.render("register", {
    message: null,
    success: false
  });
});

router.post("/register",async (req, res) => {
  try {
    const { username, password, confirmPassword, role } = req.body;

    if (password !== confirmPassword) {
      return res.render("register", {
        message: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
        success: false,
      });
    }

    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.render("register", {
        message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß",
        success: false,
      });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      username,
      password: hashedPassword,
      role: role || "viewer", // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å role ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô viewer
    });

    await newUser.save();

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á alert ‡πÅ‡∏•‡∏∞ redirect ‡πÑ‡∏õ login ‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    res.render("register", {
      message: null,
      success: true,
    });
  } catch (error) {
    console.error("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: " + error.message);
  }
});

router.get("/login", (req, res) => {
  res.render("login", { message: "", returnUrl: req.query.returnUrl || "/" });
});

router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });

    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.render("login", {
        message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        returnUrl: req.body.returnUrl || "/"
      });
    }

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö user info ‡πÅ‡∏•‡∏∞ role ‡∏•‡∏á session
    req.session.user = {
      _id: user._id,
      username: user.username,
      role: user.role
    };

    res.redirect(req.body.returnUrl || "/");
  } catch (error) {
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
  }
});


router.get("/logout", (req, res) => {
  req.session.destroy(() => {
      res.redirect("/login");
  });
});

router.get("/", isAuthenticated, async (req, res) => {
  try {
    const searchQuery = req.query.search?.trim() || ""; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    let matchStage = {}; // ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

    if (searchQuery) {
      matchStage = { requestId: searchQuery }; // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° Request ID
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á Pending)
    const pendingWorkOrders = await Transaction.aggregate([
      { $match: { workStatus: "Pending" } }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á Pending
      { $unwind: "$products" }, // ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ SKU
      {
        $lookup: {
          from: "products", // ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠ collection ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          localField: "products.sku", // ‡∏ü‡∏¥‡∏•‡∏î‡πå SKU ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          foreignField: "sku", // ‡∏ü‡∏¥‡∏•‡∏î‡πå SKU ‡πÉ‡∏ô collection ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          as: "productInfo", // ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        },
      },
      { $unwind: "$productInfo" }, // ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å productInfo ‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á products
      {
        $group: {
          _id: {
            requesterName: "$requesterName",
            typeparts: "$productInfo.typeparts",
            requestId: "$requestId",
          }, // ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° requesterName, typeparts, ‡πÅ‡∏•‡∏∞ requestId
          totalCost: {
            $sum: {
              $cond: {
                if: { $eq: ["$transactionType", "OUT"] }, // ‡∏ñ‡πâ‡∏≤ transactionType ‡πÄ‡∏õ‡πá‡∏ô "OUT"
                then: {
                  $multiply: ["$products.quantity", "$productInfo.cost"],
                },
                else: {
                  $multiply: ["$products.quantity", "$productInfo.cost", -1],
                }, // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "IN" ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å totalCost
              },
            },
          },
        },
      },
      {
        $group: {
          _id: "$_id.requesterName", // ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° requesterName
          cmTotalCost: {
            $sum: {
              $cond: {
                if: { $eq: ["$_id.typeparts", "CM"] }, // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô CM
                then: "$totalCost",
                else: 0,
              },
            },
          },
          pmTotalCost: {
            $sum: {
              $cond: {
                if: { $eq: ["$_id.typeparts", "PM"] }, // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô PM
                then: "$totalCost",
                else: 0,
              },
            },
          },
          cmPendingCount: {
            $sum: {
              $cond: {
                if: { $eq: ["$_id.typeparts", "CM"] }, // ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Pending ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô CM
                then: 1,
                else: 0,
              },
            },
          },
          pmPendingCount: {
            $sum: {
              $cond: {
                if: { $eq: ["$_id.typeparts", "PM"] }, // ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Pending ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô PM
                then: 1,
                else: 0,
              },
            },
          },
        },
      },
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalCombinedCost
      {
        $addFields: {
          totalCombinedCost: { $add: ["$cmTotalCost", "$pmTotalCost"] }, // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalCost ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á CM + PM
        },
      },
      { $sort: { totalCombinedCost: -1 } }, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å CM + PM ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ totalCost ‡∏£‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    ]);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Parts Movement ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const today = new Date();
    today.setHours(0, 0, 0, 0); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 00:00:00 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ

    const partsMovementToday = await Transaction.aggregate([
      {
        $match: {
          createdAt: { $gte: today }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        },
      },
      { $unwind: "$products" }, // ‡πÅ‡∏¢‡∏Å products ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      {
        $lookup: {
          from: "products", // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Collection 'products'
          localField: "products.sku",
          foreignField: "sku",
          as: "productInfo",
        },
      },
      { $unwind: "$productInfo" }, // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢
      {
        $group: {
          _id: {
            partId: "$products.sku",
            partName: "$productInfo.description",
            onHand: "$productInfo.quantity", // ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          },
          totalIn: {
            $sum: {
              $cond: {
                if: { $eq: ["$transactionType", "IN"] }, // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô "IN"
                then: "$products.quantity",
                else: 0,
              },
            },
          },
          totalOut: {
            $sum: {
              $cond: {
                if: { $eq: ["$transactionType", "OUT"] }, // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô "OUT"
                then: "$products.quantity",
                else: 0,
              },
            },
          },
        },
      },
      { $sort: { "_id.partId": 1 } }, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    ]);

    let pendingWorkOrdersTable = await Transaction.aggregate([
      { $match: { workStatus: "Pending" } },
      { $unwind: "$products" },
      {
        $lookup: {
          from: "products",
          localField: "products.sku",
          foreignField: "sku",
          as: "productInfo",
        },
      },
      { $unwind: "$productInfo" },
      {
        $lookup: {
          from: "stores",
          localField: "storeId",
          foreignField: "storeId",
          as: "storeInfo",
        },
      },
      { $unwind: { path: "$storeInfo", preserveNullAndEmptyArrays: true } },

      // üîπ Group by requestId + typeparts
      {
        $group: {
          _id: {
            requestId: "$requestId",
            requesterName: "$requesterName",
            storeId: "$storeId",
            storename: "$storeInfo.storename",
            typeparts: "$productInfo.typeparts",
          },
          totalCost: {
            $sum: {
              $cond: {
                if: { $eq: ["$transactionType", "OUT"] },
                then: {
                  $multiply: ["$products.quantity", "$productInfo.cost"],
                },
                else: {
                  $multiply: ["$products.quantity", "$productInfo.cost", -1],
                },
              },
            },
          },
          latestTransactionDate: { $max: "$createdAt" },
        },
      },

      {
        $group: {
          _id: {
            requestId: "$_id.requestId",
            requesterName: "$_id.requesterName",
            storeId: "$_id.storeId",
            storename: "$_id.storename",
          },
          cmTotalCost: {
            $sum: {
              $cond: {
                if: { $eq: ["$_id.typeparts", "CM"] },
                then: "$totalCost",
                else: 0,
              },
            },
          },
          pmTotalCost: {
            $sum: {
              $cond: {
                if: { $eq: ["$_id.typeparts", "PM"] },
                then: "$totalCost",
                else: 0,
              },
            },
          },
          latestTransactionDate: { $max: "$latestTransactionDate" },
        },
      },

      {
        $addFields: {
          totalCombinedCost: { $add: ["$cmTotalCost", "$pmTotalCost"] },
        },
      },
      {
        $sort: {
          "_id.requesterName": 1, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° requesterName (A ‚Üí Z)
          "_id.requestId": 1, // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° requestId (A ‚Üí Z)
        },
      },
    ]);

    const current = new Date();

    pendingWorkOrdersTable = pendingWorkOrdersTable.map((item) => {
      const latest = item.latestTransactionDate
        ? new Date(item.latestTransactionDate)
        : null;
      const pendingDays = latest
        ? Math.floor((current - latest) / (1000 * 60 * 60 * 24)) // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô
        : null;

      return {
        ...item,
        latestTransactionDate: latest,
        pendingDays,
      };
    });

    const totalSKUs = await Product.countDocuments();
    const totalStockQty = await Product.aggregate([
      { $group: { _id: null, totalQty: { $sum: "$quantity" } } },
    ]);

    const now = new Date();
    const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    
    const top10Movement = await Transaction.aggregate([
      {
        $match: {
          createdAt: { $gte: firstDayOfMonth, $lte: lastDayOfMonth },
          workStatus: "Finish"
        }
      },
      { $unwind: "$products" },
      {
        $group: {
          _id: { sku: "$products.sku", type: "$transactionType" },
          totalQty: { $sum: "$products.quantity" }
        }
      },
      {
        $group: {
          _id: "$_id.sku",
          inQty: {
            $sum: {
              $cond: [{ $eq: ["$_id.type", "IN"] }, "$totalQty", 0]
            }
          },
          outQty: {
            $sum: {
              $cond: [{ $eq: ["$_id.type", "OUT"] }, "$totalQty", 0]
            }
          }
        }
      },
      {
        $lookup: {
          from: "products",
          localField: "_id",
          foreignField: "sku",
          as: "productInfo"
        }
      },
      { $unwind: "$productInfo" },
      {
        $project: {
          sku: "$_id",
          description: "$productInfo.description",
          totalIssued: "$outQty"
        }
      },
      { $sort: { totalIssued: -1 } }, // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      { $limit: 10 }
    ]);
    
    
    

    const totalStockValue = await Product.aggregate([
      {
        $group: {
          _id: null,
          totalValue: { $sum: { $multiply: ["$cost", "$quantity"] } },
        },
      },
    ]);

    const pendingSummary = await Transaction.aggregate([
      { $match: { workStatus: "Pending" } },
      { $unwind: "$products" },
      {
        $lookup: {
          from: "products",
          localField: "products.sku",
          foreignField: "sku",
          as: "productInfo"
        }
      },
      { $unwind: "$productInfo" },
      {
        $group: {
          _id: null,
          totalPendingQty: {
            $sum: {
              $cond: [
                { $eq: ["$transactionType", "OUT"] },
                "$products.quantity",
                { $multiply: ["$products.quantity", -1] } // ‡∏•‡∏ö‡∏Ñ‡∏∑‡∏ô IN
              ]
            }
          },
          totalPendingValue: {
            $sum: {
              $cond: [
                { $eq: ["$transactionType", "OUT"] },
                { $multiply: ["$products.quantity", "$productInfo.cost"] },
                { $multiply: ["$products.quantity", "$productInfo.cost", -1] }
              ]
            }
          }
        }
      }
    ]);
    
    const totalPendingQty = pendingSummary[0]?.totalPendingQty || 0;
    const totalPendingValue = pendingSummary[0]?.totalPendingValue || 0;
    

    res.render("index", {
      totalPendingQty,
      totalPendingValue,
      pendingWorkOrders,
      searchQuery,
      partsMovementToday,
      pendingWorkOrdersTable,
      totalSKUs,
      totalStockQty: totalStockQty[0]?.totalQty || 0,
      top10Movement,
      totalStockValue: totalStockValue[0]?.totalValue || 0,
    });
  } catch (error) {
    console.error("Error fetching work orders:", error);
    res.status(500).send("Internal Server Error");
  }
});

router.get('/import-form',isAuthenticated, isAdmin,(req,res)=>{
  res.render('import-form')
})

router.get('/trans-in',isAuthenticated, isAdmin,(req,res)=>{
    res.render('trans-in')
})

router.get('/trans-out',isAuthenticated, isAdmin,(req,res)=>{
    res.render('trans-out')
})


router.get('/onhand', isAuthenticated, async (req, res) => {
  const perPage = 12;
  const page = parseInt(req.query.page) || 1;
  const searchQueryRaw = req.query.search || '';

  function escapeRegex(str) {
      return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }
  const escapedQuery = escapeRegex(searchQueryRaw);
  const condition = searchQueryRaw ? {
      $or: [
          { sku: { $regex: escapedQuery, $options: 'i' } },
          { description: { $regex: escapedQuery, $options: 'i' } }
      ]
  } : {};

  const total = await Product.countDocuments(condition);
  const products = await Product.find(condition)
      .skip((page - 1) * perPage)
      .limit(perPage);

  res.render('onhand', {
      products,
      search: searchQueryRaw,
      current: page,
      pages: Math.ceil(total / perPage)
  });
});


router.get('/delete/:id',isAuthenticated,(req,res)=>{
    Product.findByIdAndDelete(req.params.id,{useFindAndModify:false}).exec(err=>{
        res.redirect('/edit-product')
    })
})

router.get("/transaction", isAuthenticated, async (req, res) => {
  try {
    const searchQuery = req.query.search ? req.query.search.trim() : "";

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transaction ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const transactions = await Transaction.find()
      .sort({ createdAt: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      .lean();

    // ‡∏î‡∏∂‡∏á SKU ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å transactions
    const allSKUs = transactions.flatMap(transaction =>
      transaction.products.map(product => product.sku)
    );

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ SKU
    const productsMap = await Product.find({ sku: { $in: allSKUs } })
      .lean()
      .then(products =>
        products.reduce((map, product) => {
          map[product.sku] = product;
          return map;
        }, {})
      );

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const skuBalances = {}; // ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á SKU

    const enrichedTransactions = transactions.map(transaction => {
      const updatedProducts = transaction.products.map(product => {
        const sku = product.sku;

        if (!skuBalances[sku]) skuBalances[sku] = 0;
        if (transaction.transactionType === "IN") {
          skuBalances[sku] += product.quantity;
        } else if (transaction.transactionType === "OUT") {
          skuBalances[sku] -= product.quantity;
        }

        return {
          ...product,
          description: productsMap[sku]?.description || "N/A",
          remaining: skuBalances[sku],
        };
      });

      return {
        ...transaction,
        products: updatedProducts,
        createdAtFormatted: dayjs(transaction.createdAt)
          .tz("Asia/Bangkok")
          .format("DD MMM YYYY, HH:mm"),
      };
    });

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    let filteredTransactions = enrichedTransactions;
    if (searchQuery) {
      filteredTransactions = enrichedTransactions
        .map(transaction => ({
          ...transaction,
          products: transaction.products.filter(product =>
            product.sku.includes(searchQuery)
          ),
        }))
        .filter(transaction => transaction.products.length > 0);
    }

    res.render("transaction", {
      products: filteredTransactions,
      searchQuery,
    });
  } catch (error) {
    console.error("Error fetching transactions:", error);
    res.status(500).send("Error fetching transactions");
  }
});

router.get('/workorder', isAuthenticated, isAdmin, async (req, res) => {
  try {
    const searchQuery = req.query.search?.trim() || '';
    const statusFilter = req.query.statusFilter?.trim() || '';
    let matchStage = {};

    if (searchQuery) {
      matchStage.$or = [
        { requestId: { $regex: searchQuery, $options: 'i' } },
        { requesterName: { $regex: searchQuery, $options: 'i' } }
      ];
    }

    if (statusFilter) {
      matchStage.workStatus = statusFilter;
    }

    const groupedTransactions = await Transaction.aggregate([
      { $match: matchStage },
      {
        $group: {
          _id: "$requestId",
          requesterName: { $first: "$requesterName" },
          createdAt: { $last: "$createdAt" },
          workStatus: { $last: "$workStatus" },
          transactionCount: { $sum: 1 },
        },
      },
      { $sort: { createdAt: -1 } },
    ]);

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° createdAtFormatted
    groupedTransactions.forEach(tx => {
      tx.createdAtFormatted = dayjs(tx.createdAt)
        .tz("Asia/Bangkok")
        .format("DD MMM YYYY, HH:mm");
    });

    res.render('workorder', { 
      transactions: groupedTransactions, 
      searchQuery, 
      statusFilter 
    });

  } catch (error) {
    console.error('Error fetching grouped work orders:', error);
    res.status(500).send('Internal Server Error');
  }
});


router.get('/workorder/:requestId', isAuthenticated, async (req, res) => {
  const requestId = decodeURIComponent(req.params.requestId);
  try {
    const transactions = await Transaction.aggregate([
      { $match: { requestId } },
      { $unwind: '$products' },
      {
        $lookup: {
          from: 'products',
          localField: 'products.sku',
          foreignField: 'sku',
          as: 'productInfo'
        }
      },
      { $unwind: '$productInfo' },
      {
        $lookup: {
          from: 'stores',
          localField: 'storeId',
          foreignField: 'storeId',
          as: 'storeInfo'
        }
      },
      { $unwind: { path: '$storeInfo', preserveNullAndEmptyArrays: true } },
      {
        $group: {
          _id: '$_id',
          requesterName: { $first: '$requesterName' },
          requestId: { $first: '$requestId' },
          createdAt: { $first: '$createdAt' },
          transactionType: { $first: '$transactionType' },
          workStatus: { $first: '$workStatus' },
          storeId: { $first: '$storeId' },
          storename: { $first: '$storeInfo.storename' },
          products: {
            $push: {
              sku: '$products.sku',
              quantity: '$products.quantity',
              description: '$productInfo.description'
            }
          }
        }
      },
      { $sort: { createdAt: 1 } }
    ]);

    if (!transactions || transactions.length === 0) {
      return res.status(404).send('No transactions found for this Request ID');
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° createdAtFormatted
    transactions.forEach(tx => {
      tx.createdAtFormatted = dayjs(tx.createdAt)
        .tz("Asia/Bangkok")
        .format("DD MMM YYYY, HH:mm");
    });

    res.render('work-detail', { transactions, requestId });
  } catch (error) {
    console.error('Error fetching transactions for Request ID:', error);
    res.status(500).send('Internal Server Error');
  }
});


router.put('/workorder/:requestId/update-status', isAuthenticated, async (req, res) => {
  const requestId = decodeURIComponent(req.params.requestId);
  const { workStatus, newRequestId, forceUpdate } = req.body;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ requestId ‡πÉ‡∏´‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà forceUpdate
    if (newRequestId && newRequestId !== requestId && !forceUpdate) {
      const exists = await Transaction.findOne({ requestId: newRequestId });
      if (exists) {
        return res.status(200).json({
          message: "This Request ID already exists. Do you still want to use it?",
          duplicate: true
        });
      }
    }

    const result = await Transaction.updateMany(
      { requestId },
      {
        $set: {
          workStatus,
          ...(newRequestId && newRequestId !== requestId ? { requestId: newRequestId } : {})
        }
      }
    );

    if (result.modifiedCount === 0) {
      return res.status(404).json({ message: "No transactions found to update." });
    }

    res.json({
      message: "Updated successfully",
      modifiedCount: result.modifiedCount,
      newRequestId: newRequestId !== requestId ? newRequestId : null
    });
  } catch (error) {
    console.error("Error updating:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
});


router.get('/get-product-details', (req, res) => {
    const sku = req.query.sku; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ sku ‡∏à‡∏≤‡∏Å URL
    Product.findOne({ sku: sku }, 'description cost', (err, product) => {
      if (err) {
        return res.status(500).send('Error fetching product details');
      }
  
      if (product) {
        res.json({ product }); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• product ‡∏Å‡∏•‡∏±‡∏ö
      } else {
        res.json({ product: null }); // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      }
    });
  });



router.get("/get-store-name", async (req, res) => {
  try {
    const { storeId } = req.query;
    console.log("Received storeId:", storeId); // Debug: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤

    if (!storeId) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤" });
    }

    const store = await Store.findOne({ storeId: Number(storeId) });
    console.log("Store data:", store); // Debug: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    if (!store) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ" });
    }

    res.status(200).json({ storename: store.storename });
  } catch (error) {
    console.error("Error fetching store name:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});


router.get("/get-transaction-details", async (req, res) => {
  try {
    const { repair } = req.query;

    if (!repair) {
      return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å' });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• transaction ‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å
    const transaction = await Transaction.findOne({ requestId: repair });

    if (!transaction) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏ô‡∏µ‡πâ' });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏á‡∏≤‡∏ô, ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤
    const store = await Store.findOne({ storeId: transaction.storeId });

    // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• store ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    res.status(200).json({
      transaction: {
        requesterName: transaction.requesterName || '',
        workStatus: transaction.workStatus || '',
        storeId: store ? store.storeId : ''
      }
    });
  } catch (error) {
    console.error('Error fetching transaction details:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
});

  
router.post("/add_trans-in", isAuthenticated, isAdmin, async (req, res) => {
  try {
    const { name, repair, workStatus, storeId, products } = req.body;

    if (!name?.trim() || !repair?.trim() || !storeId?.trim() || !Array.isArray(products) || products.length === 0) {
      return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const store = await Store.findOne({ storeId: Number(storeId) });
    if (!store) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ" });
    }

    const invalidMessages = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SKU ‡πÅ‡∏•‡∏∞ quantity
    for (const item of products) {
      const product = await Product.findOne({ sku: item.sku.trim() });
      if (!product) {
        invalidMessages.push(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ SKU: ${item.sku}`);
        continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö quantity ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      }
      if (!item.quantity || item.quantity <= 0) {
        invalidMessages.push(`SKU: ${item.sku} ‚Üí ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0`);
      }
    }

    if (invalidMessages.length > 0) {
      return res.status(400).json({
        error: "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        alert: invalidMessages.join("<br>"),
      });
    }

    await Transaction.updateMany({ requestId: repair.trim() }, { $set: { workStatus } });

    const newTransaction = new Transaction({
      requesterName: name.trim(),
      requestId: repair.trim(),
      transactionType: "IN",
      workStatus,
      storeId: Number(storeId),
      products: products.map((p) => ({
        sku: p.sku.trim(),
        quantity: Number(p.quantity)
      })),
      username: req.user.username,
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà validate ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    for (const item of products) {
      const product = await Product.findOne({ sku: item.sku.trim() });
      product.quantity = (product.quantity || 0) + item.quantity;
      await product.save();
    }

    await newTransaction.save();
    res.status(200).json({ message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });

  } catch (error) {
    console.error("Error saving transaction:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});



router.post('/add_trans-out', isAuthenticated, isAdmin, async (req, res) => {
  try {
    const { name, repair, workStatus, storeId, products } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    if (!name || !repair || !storeId || !Array.isArray(products) || products.length === 0) {
      return res.status(400).json({ alert: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const store = await Store.findOne({ storeId: Number(storeId) });
    if (!store) {
      return res.status(404).json({ alert: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ' });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SKU ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const insufficientStock = [];

    for (const item of products) {
      const sku = item.sku ? item.sku.trim() : '';
      const quantity = Number(item.quantity);

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏™‡πà SKU ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!sku) {
        return res.status(400).json({
          alert: `‡∏û‡∏ö SKU ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏)`
        });
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ SKU ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const product = await Product.findOne({ sku });
      if (!product) {
        return res.status(404).json({
          alert: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ SKU: ${sku}`
        });
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
      if (isNaN(quantity) || quantity <= 0) {
        return res.status(400).json({
          alert: `SKU: ${sku} ‚Üí ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0`
        });
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if ((product.quantity || 0) < quantity) {
        insufficientStock.push({ sku, available: product.quantity || 0 });
      }
    }

    if (insufficientStock.length > 0) {
      const alertMessage = insufficientStock
        .map(item => `SKU: ${item.sku} ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${item.available}`)
        .join("<br>");
      return res.status(400).json({
        alert: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠<br>${alertMessage}`
      });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏á‡∏≤‡∏ô
    await Transaction.updateMany({ requestId: repair }, { $set: { workStatus } });

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Transaction ‡πÉ‡∏´‡∏°‡πà
    const newTransaction = new Transaction({
      requesterName: name.trim(),
      requestId: repair.trim(),
      transactionType: 'OUT',
      workStatus,
      storeId: Number(storeId),
      products: products.map(p => ({
        sku: p.sku.trim(),
        quantity: Number(p.quantity)
      })),
      username: req.user.username,
    });

    // ‚úÖ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    for (const item of products) {
      const product = await Product.findOne({ sku: item.sku.trim() });
      product.quantity -= Number(item.quantity);
      try {
        await product.save();
      } catch (err) {
        console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ SKU ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", item.sku, err);
        return res.status(500).json({ alert: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å SKU ${item.sku} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î` });
      }
    }

    await newTransaction.save();
    res.status(200).json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /add_trans-out:', error);
    res.status(500).json({ alert: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ' });
  }
});




router.get('/edit-product', isAuthenticated,isAdmin, (req, res) => {
  const searchQuery = req.query.search || ''; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sku ‡πÅ‡∏•‡∏∞ description
  const searchCondition = {
      $or: [
          { sku: { $regex: searchQuery, $options: 'i' } }, 
          { description: { $regex: searchQuery, $options: 'i' } }
      ]
  };

  Product.find(searchQuery ? searchCondition : {}).sort({ sku: 1 }).exec((err, products) => { 
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° `.sort({ sku: 1 })` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á SKU ‡∏à‡∏≤‡∏Å A-Z
      if (err) {
          console.error('Error fetching products:', err);
          return res.status(500).send('Internal Server Error');
      }

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á view ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• products ‡πÅ‡∏•‡∏∞ search query
      res.render('edit-product', { products: products, search: searchQuery });
  });
});


router.get('/add-product', isAuthenticated,isAdmin, (req, res) => {
    res.render('add-product', { success: null, error: null }); 
});


router.post("/add", upload.single("image"), async (req, res) => {
  try {
    let imagePublicId = "";

    if (req.file) {
      // üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Cloudinary
      const result = await cloudinary.uploader.upload(req.file.path, {
        folder: 'products',
        public_id: req.body.sku,
        overwrite: true,
        invalidate: true
      });

      imagePublicId = result.public_id; // ‡πÄ‡∏ä‡πà‡∏ô "products/DM123456"

      // üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå local ‡∏´‡∏•‡∏±‡∏á upload
      fs.unlink(req.file.path, (err) => {
        if (err) console.error("‚ö†Ô∏è Failed to delete local file:", err);
        else console.log("üßπ Local file deleted:", req.file.path);
      });
    }

    const data = new Product({
      sku: req.body.sku,
      description: req.body.description,
      cost: req.body.cost,
      image: imagePublicId, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö public_id
      typeparts: req.body.typeparts,
    });

    await data.save();
    console.log("‚úÖ Product added:", data);
    res.render("add-product", { success: true, error: false });

  } catch (err) {
    console.error("üî¥ Error adding product:", err);
    res.render("add-product", { success: false, error: true });
  }
});


router.post('/edit',isAuthenticated, (req, res) => {
    const edit_id = req.body.edit_id
    Product.findOne({_id:edit_id}).exec((err,doc)=>{
        res.render('edit-form',{product:doc})
    })
})



router.post('/update', upload.single('image'), isAuthenticated, async (req, res) => {
  try {
    console.log("üü¢ Received update request:", req.body);

    const update_id = req.body.update_id;

    let updateData = {
      sku: req.body.sku,
      description: req.body.description,
      cost: req.body.cost,
      typeparts: req.body.typeparts
    };

    const product = await Product.findById(update_id);
    if (!product) {
      console.log("üî¥ Error: Product not found!");
      return res.render('edit-form', { product: updateData, message: 'error' });
    }

    console.log("üü¢ Found product:", product);

    if (req.file) {
      console.log("üü¢ Uploaded file (local):", req.file);

      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Cloudinary
      if (product.image) {
        try {
          console.log(`üü° Deleting old image: ${product.image}`);
          await cloudinary.uploader.destroy(product.image);
        } catch (err) {
          console.error("üî¥ Error deleting old image:", err);
        }
      }

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary
      const result = await cloudinary.uploader.upload(req.file.path, {
        folder: 'products',
        public_id: req.body.sku,
        overwrite: true,
        invalidate: true
      });

      updateData.image = result.public_id; // ‡πÄ‡∏ä‡πà‡∏ô products/DM124011

      // ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå local ‡∏´‡∏•‡∏±‡∏á upload ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      fs.unlink(req.file.path, (err) => {
        if (err) console.error("‚ö†Ô∏è Failed to delete local file:", err);
        else console.log("üßπ Local file deleted:", req.file.path);
      });
    } else {
      updateData.image = product.image;
    }

    console.log("üü¢ Updating product with data:", updateData);

    const updatedProduct = await Product.findByIdAndUpdate(update_id, updateData, { new: true });

    console.log("‚úÖ Update successful!");
    res.render('edit-form', { product: updatedProduct, message: 'success' });

  } catch (err) {
    console.error("üî¥ Error updating product:", err);
    res.render('edit-form', { product: req.body, message: 'error' });
  }
});




router.post("/import-excel",isAuthenticated, async (req, res) => {
  const { data: parts, requesterName, requestId } = req.body;

  try {
    if (!Array.isArray(parts) || parts.length === 0) {
      return res.json({ success: false, message: "No data received." });
    }

    for (const item of parts) {
      if (!item.SKU) continue;

      const sku = item.SKU.trim();
      const existingProduct = await Product.findOne({ sku });

      const updateFields = {};
      if (item.Description) updateFields.description = item.Description.trim();
      if (item.Type) updateFields.typeparts = item.Type.trim();
      if (item.Cost !== undefined && item.Cost !== "") updateFields.cost = parseFloat(item.Cost);
      if (item.Image) updateFields.image = item.Image;

      let importedQuantity = parseInt(item.Quantity);
      if (isNaN(importedQuantity)) importedQuantity = 0;
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î quantity ‡πÉ‡∏´‡πâ product ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ update
      if (existingProduct) {
        updateFields.quantity = (existingProduct.quantity || 0) + importedQuantity;
      } else {
        updateFields.quantity = importedQuantity;
      }
      
      // ‚úî ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ quantity > 0
      if (importedQuantity > 0) {
        const transaction = new Transaction({
          requesterName: requesterName || "Excel Import",
          requestId: requestId || "Excel Import",
          transactionType: "IN",
          workStatus: "Finish",
          products: [
            {
              sku: sku,
              quantity: importedQuantity
            }
          ],
          username: req.user?.username || "system",
          createdAt: new Date()
        });
      
        await transaction.save();
      }
      

      await Product.updateOne(
        { sku: sku },
        { $set: updateFields },
        { upsert: true }
      );
    }

    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå Import error:", err.message);
    res.json({ success: false, message: err.message });
  }
});

router.get('/stock-summary',isAuthenticated, async (req, res) => {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• onHand ‡∏à‡∏≤‡∏Å collection products
    const products = await Product.find({}, 'sku description quantity');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Pending (‡∏£‡∏ß‡∏° OUT - IN)
    const pendingData = await Transaction.aggregate([
      { $match: { workStatus: 'Pending' } },
      { $unwind: '$products' },
      {
        $group: {
          _id: '$products.sku',
          totalOut: {
            $sum: {
              $cond: [{ $eq: ['$transactionType', 'OUT'] }, '$products.quantity', 0]
            }
          },
          totalIn: {
            $sum: {
              $cond: [{ $eq: ['$transactionType', 'IN'] }, '$products.quantity', 0]
            }
          }
        }
      },
      {
        $project: {
          pendingQuantity: { $subtract: ['$totalOut', '$totalIn'] }
        }
      }
    ]);

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const pendingMap = {};
    pendingData.forEach(item => {
      pendingMap[item._id] = item.pendingQuantity;
    });

    // ‡∏£‡∏ß‡∏° product ‡∏Å‡∏±‡∏ö pending
    const summary = products.map(product => ({
      sku: product.sku,
      description: product.description,
      onHand: product.quantity,
      pending: pendingMap[product.sku] || 0
    }));

    res.render('stock-summary', { summary });
  } catch (error) {
    console.error('Error fetching stock summary:', error);
    res.status(500).send('Internal Server Error');
  }
});


router.get('/get-transactions-summary', isAuthenticated, async (req, res) => {
  const { repair } = req.query;
  try {
    const transactions = await Transaction.aggregate([
      { $match: { requestId: repair } },
      { $unwind: '$products' },
      {
        $lookup: {
          from: 'products',
          localField: 'products.sku',
          foreignField: 'sku',
          as: 'productInfo'
        }
      },
      { $unwind: '$productInfo' },
      {
        $group: {
          _id: '$_id',
          requesterName: { $first: '$requesterName' },
          requestId: { $first: '$requestId' },
          createdAt: { $first: '$createdAt' },
          transactionType: { $first: '$transactionType' },
          workStatus: { $first: '$workStatus' },
          storeId: { $first: '$storeId' },
          products: {
            $push: {
              sku: '$products.sku',
              quantity: '$products.quantity',
              description: '$productInfo.description'
            }
          }
        }
      },
      { $sort: { createdAt: 1 } }
    ]);

    res.json({ transactions });
  } catch (error) {
    console.error('Error fetching summary:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
});




module.exports = router