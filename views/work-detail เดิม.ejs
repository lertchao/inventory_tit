<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Work Detail</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="icon" href="images/storage.png" sizes="32x32" />
</head>

<body>
  <div class="container mt-5">
    <h2 class="text-center section-title">Request ID: <%= requestId %></h2>

    <% if (transactions.length > 0) { %>
      <h5>
        Store : <%= String(transactions[0].storeId).padStart(3, '0') %> - <%= transactions[0].storename %>
      </h5>
    <% } %>

    <!-- Top controls -->
    <div class="container mt-4">
      <div class="row g-3 align-items-end justify-content-end">
        <div class="col-md-3 col-sm-6">
          <label for="requesterNameInput" class="form-label fw-bold">ชื่อผู้เบิก</label>
          <input id="requesterNameInput" class="form-control" value="<%= transactions[0].requesterName %>" />
        </div>

        <div class="col-md-3 col-sm-6">
          <label for="newRequestId" class="form-label fw-bold">เลขที่ใบเบิก</label>
          <input id="newRequestId" class="form-control" value="<%= requestId %>" />
        </div>

        <div class="col-md-2 col-sm-6">
          <label for="storeIdInput" class="form-label fw-bold">รหัสสาขา</label>
          <input id="storeIdInput" type="text" class="form-control"
            value="<%= String(transactions[0].storeId).padStart(3, '0') %>"
            pattern="\d{3}" maxlength="3"
            oninput="this.value = this.value.replace(/\D/g, '').slice(0, 3)" />
        </div>

        <div class="col-md-2 col-sm-6">
          <label for="workStatusSelect" class="form-label fw-bold">สถานะใบงาน</label>
          <select id="workStatusSelect" class="form-select">
            <option value="Pending">Pending</option>
            <option value="Finish">Finish</option>
            <option value="Cancel">Cancel</option>
          </select>
        </div>

        <div class="col-md-2 col-sm-12">
          <label class="form-label fw-bold invisible">Update</label>
          <button id="updateWorkStatus" class="btn btn-primary w-100">Update</button>
        </div>
      </div>

      <div class="mt-3 text-end text-muted small">
        Created At: <%= transactions[0].createdAtFormatted %><br />
        Last Updated: <%= transactions[0].updatedAtFormatted %>
      </div>
    </div>

    <!-- Duplicate RequestId Modal -->
    <div class="modal fade" id="duplicateModal" tabindex="-1" aria-labelledby="duplicateModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header bg-warning text-dark">
            <h5 class="modal-title" id="duplicateModalLabel">คำเตือน</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            Request ID นี้มีอยู่แล้วในระบบ<br />คุณต้องการใช้ซ้ำหรือไม่?
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
            <button id="confirmDuplicateBtn" type="button" class="btn btn-primary">ยืนยันใช้ซ้ำ</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Cancel Confirmation Modal -->
    <div class="modal fade" id="cancelConfirmModal" tabindex="-1" aria-labelledby="cancelConfirmModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header bg-danger text-white">
            <h5 class="modal-title" id="cancelConfirmModalLabel">ยืนยันการยกเลิกใบงาน (Cancel)</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p class="mb-2">รายการที่จะคืนเข้าคลังจากใบงานนี้:</p>
            <div class="table-responsive">
              <table class="table table-sm table-bordered">
                <thead class="table-light">
                  <tr>
                    <th class="text-center" style="width:60px">#</th>
                    <th>SKU</th>
                    <th>Description</th>
                    <th class="text-center" style="width:140px">Qty (IN)</th>
                  </tr>
                </thead>
                <tbody id="cancelListBody"></tbody>
              </table>
            </div>
            <div class="alert alert-warning small mb-0">
              เมื่อยืนยัน ระบบจะสร้าง Transaction ประเภท <b>IN</b> ตามจำนวนด้านบน
              และตั้งสถานะใบงานเป็น <b>Cancel</b><br>
              ***ไม่สามารถเปลี่ยนแปลงสถานะใบงานได้อีก***
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">กลับ</button>
            <button id="confirmCancelBtn" type="button" class="btn btn-danger">ยืนยันยกเลิก & คืนของ</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Return Confirmation Modal (ใหม่) -->
    <div class="modal fade" id="returnConfirmModal" tabindex="-1" aria-labelledby="returnConfirmModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header bg-info text-dark">
            <h5 class="modal-title" id="returnConfirmModalLabel">ยืนยันการคืนของบางส่วน (Partial Return)</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p class="mb-2">ตรวจสอบรายการคืนต่อไปนี้:</p>
            <div class="table-responsive">
              <table class="table table-sm table-bordered">
                <thead class="table-light">
                  <tr>
                    <th class="text-center" style="width:60px">#</th>
                    <th>SKU</th>
                    <th>Description</th>
                    <th class="text-center">Net (Current)</th>
                    <th class="text-center">Return Qty.</th>
                    <th class="text-center">Net After Return</th>
                  </tr>
                </thead>
                <tbody id="returnListBody"></tbody>
              </table>
            </div>
            <div class="alert alert-warning small mb-0">
              เมื่อยืนยัน ระบบจะสร้าง Transaction ประเภท <b>IN</b> สำหรับรายการด้านบน
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">กลับ</button>
            <button id="confirmReturnBtn" type="button" class="btn btn-primary">ยืนยันคืนของ</button>
          </div>
        </div>
      </div>
    </div>

    <div id="alertMessage" class="alert d-none alert-dismissible fade show mt-3 text-center" role="alert">
      <span id="alertText">ข้อความแจ้งเตือนที่นี่</span>
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>

    <!-- Transaction table -->
    <div class="table-responsive mt-3">
      <table class="table table-bordered">
        <thead class="table-secondary">
          <tr>
            <th class="text-center align-middle">#</th>
            <th class="text-center align-middle">SKU</th>
            <th class="text-center align-middle">Quantity</th>
            <th class="text-center align-middle">Transaction Type</th>
            <th class="text-center align-middle">Work Status</th>
            <th class="text-center align-middle">Created At</th>
          </tr>
        </thead>
        <tbody>
          <% transactions.forEach((transaction, tIndex) => { %>
            <% transaction.products.forEach((product, pIndex) => { %>
              <tr>
                <td class="text-center"><%= pIndex === 0 ? tIndex + 1 : '' %></td>
                <td class="text-center"><%= product.sku %></td>
                <td class="text-center"><%= product.quantity %></td>
                <td class="text-center"><%= transaction.transactionType %></td>
                <td class="text-center">
                  <span class="badge bg-<%= transaction.workStatus === 'Finish' ? 'success' : (transaction.workStatus === 'Cancel' ? 'danger' : 'secondary') %>">
                    <%= transaction.workStatus %>
                  </span>
                </td>
                <td class="text-center"><%= transaction.createdAtFormatted %></td>
              </tr>
            <% }) %>
          <% }) %>
        </tbody>
      </table>
    </div>

    <% /* Build summary (net by SKU) */ %>
    <% let summary = {}; transactions.forEach(transaction => {
         transaction.products.forEach(product => {
           const sku = product.sku;
           const desc = product.description || '';
           const qty = Number(product.quantity);
           if (!summary[sku]) summary[sku] = { description: desc, net: 0 };
           if ((transaction.transactionType || '').toLowerCase() === 'in') {
             summary[sku].net += qty;
           } else if ((transaction.transactionType || '').toLowerCase() === 'out') {
             summary[sku].net -= qty;
           }
         });
       }); %>

<%
  // For cancel auto-return preview
  const cancelReturn = [];
  Object.keys(summary || {}).forEach((sku) => {
    const net = Number(summary[sku].net) || 0;
    if (net < 0) {
      cancelReturn.push({ sku, description: summary[sku].description || '', qty: Math.abs(net) });
    }
  });
%>

<script id="cancelReturnData" type="application/json"><%- JSON.stringify(cancelReturn || []) %></script>
<script>
  const cancelReturnItems = JSON.parse(document.getElementById('cancelReturnData').textContent || '[]');
</script>

    <!-- Summary table -->
    <h3 class="mt-3 text-center">Summary (ยอดใช้อะไหล่จริง)</h3>
    <div class="table-responsive mt-3">
      <table class="table table-bordered mt-3" id="summaryTable">
        <thead class="table-dark">
          <tr>
            <th class="text-center align-middle">#</th>
            <th class="text-center align-middle">SKU</th>
            <th class="text-center align-middle">Description</th>
            <th class="text-center align-middle">Net Quantity</th>
            <th class="text-center align-middle">Return Quantity</th>
          </tr>
        </thead>
        <tbody>
          <% Object.keys(summary).forEach((sku, index) => { 
               const net = Number(summary[sku].net) || 0;
               const maxReturn = net < 0 ? Math.abs(net) : 0;
          %>
            <tr data-sku="<%= sku %>" data-description="<%= summary[sku].description %>" data-net="<%= net %>" data-max="<%= maxReturn %>">
              <td class="text-center"><%= index + 1 %></td>
              <td class="text-center"><%= sku %></td>
              <td class="text-center"><%= summary[sku].description %></td>
              <td class="text-center"><%= net %></td>
              <td class="text-center">
                <input 
                  type="number"
                  class="form-control form-control-sm return-input text-center"
                  value="0"
                  min="0"
                  step="1"
                  inputmode="numeric"
                  pattern="[0-9]*"
                  <%= net < 0 ? ('max="'+ maxReturn +'" data-max="'+ maxReturn +'"') : 'disabled data-max="0"' %>
                  style="max-width:120px;margin:0 auto;text-align:center;"
                />
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <a href="/workorder" class="btn btn-lg btn-secondary mb-3">Back</a>
  </div>

  <script>
    // Set default selected status
    document.addEventListener('DOMContentLoaded', function () {
      const defaultStatus = "<%= transactions[0]?.workStatus || 'Pending' %>";
      document.getElementById('workStatusSelect').value = defaultStatus;
    });
  </script>

  <script>
    const updateBtn = document.getElementById('updateWorkStatus');
    const alertMessage = document.getElementById('alertMessage');
    const alertText = document.getElementById('alertText');
    const confirmDuplicateBtn = document.getElementById('confirmDuplicateBtn');

    const workStatusSelect = document.getElementById('workStatusSelect');
    const reqIdInput = document.getElementById('newRequestId');
    const storeIdInput = document.getElementById('storeIdInput');
    const requesterInput = document.getElementById('requesterNameInput');

    let duplicateModal;

    function disableControls() {
      workStatusSelect.disabled = true;
      reqIdInput.disabled = true;
      storeIdInput.disabled = true;
      requesterInput.disabled = true;
      updateBtn.disabled = true;
      document.querySelectorAll('.return-input').forEach(i => i.disabled = true);
    }
    function setCancelInputLock(lock) {
      reqIdInput.disabled = lock;
      storeIdInput.disabled = lock;
      requesterInput.disabled = lock;
    }

    // ===== Strict numeric handling =====
    function clampReturnInput(input) {
      if (input.disabled) return;
      // ลบดิจิตที่ไม่ใช่ตัวเลข
      let raw = (input.value ?? '').toString().replace(/[^0-9]/g, '');
      if (raw === '') raw = '0';
      let n = parseInt(raw, 10);
      if (!Number.isFinite(n) || n < 0) n = 0;

      // ดึง max แบบนิ่งจาก data-* (เชื่อถือได้กว่าบางเบราว์เซอร์)
      const tr = input.closest('tr');
      const maxFromRow = Number(tr?.dataset?.max ?? 0);
      const maxFromAttr = Number(input.getAttribute('max') || 0);
      const max = Number.isFinite(maxFromRow) && maxFromRow > 0 ? maxFromRow : maxFromAttr;

      if (max > 0 && n > max) n = max;
      input.value = String(n);
    }
    function blockNonNumericKey(e) {
      const allowed = ['Backspace','Delete','ArrowLeft','ArrowRight','ArrowUp','ArrowDown','Tab','Home','End'];
      const isDigit = e.key >= '0' && e.key <= '9';
      if (!isDigit && !allowed.includes(e.key)) e.preventDefault();
    }

    // ผูกอีเวนต์ให้ทุกช่อง (input/change/keyup/blur) + กัน scroll เปลี่ยนค่า
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.return-input').forEach(inp => {
        ['input','change','keyup','blur'].forEach(ev => inp.addEventListener(ev, () => clampReturnInput(inp)));
        inp.addEventListener('keydown', blockNonNumericKey);
        inp.addEventListener('wheel', e => e.preventDefault(), { passive: false });
      });
    });

    function collectReturnItems() {
      const rows = Array.from(document.querySelectorAll('#summaryTable tbody tr'));
      const items = [];
      rows.forEach(tr => {
        const net = Number(tr.dataset.net || 0);
        const sku = tr.dataset.sku;
        const description = tr.dataset.description || '';
        const input = tr.querySelector('.return-input');
        if (!input || input.disabled) return;

        // ✅ คำนวณ max จาก net ของแถว (ไม่พึ่งพา attribute)
        const max = net < 0 ? Math.abs(net) : 0;
        let qty = parseInt((input.value || '0'), 10);
        if (!Number.isFinite(qty)) qty = 0;
        if (qty > max) qty = max;
        if (qty <= 0) return;

        items.push({ sku, description, net, quantity: qty });
      });
      return items;
    }

    async function sendUpdate(force = false, extra = {}) {
      const newStatus = workStatusSelect.value;
      const newRequestId = reqIdInput.value.trim();
      const requesterName = requesterInput.value.trim();
      const storeId = storeIdInput.value.trim();

      const originalText = updateBtn.innerHTML;
      updateBtn.disabled = true;
      updateBtn.innerHTML = `<span class="spinner-border spinner-border-sm me-1"></span> Updating...`;

      try {
        const encodedRequestId = encodeURIComponent("<%= requestId %>");
        const response = await fetch(`/workorder/${encodedRequestId}/update-status`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            workStatus: newStatus,
            newRequestId,
            requesterName,
            storeId,
            forceUpdate: force,
            ...extra
          })
        });

        const result = await response.json();

        if (result.duplicate && !force) {
          duplicateModal = new bootstrap.Modal(document.getElementById('duplicateModal'));
          duplicateModal.show();
          updateBtn.disabled = false;
          updateBtn.innerHTML = originalText;
          return;
        }

        if (response.ok) {
          if (result.message === 'No transactions found to update.') {
            alertMessage.className = 'alert alert-warning alert-dismissible fade show mt-3';
            alertText.innerText = result.message;
            alertMessage.classList.remove('d-none');
            updateBtn.disabled = false;
            updateBtn.innerHTML = originalText;
            return;
          }

          alertMessage.className = 'alert alert-success alert-dismissible fade show mt-3';
          alertText.innerText = result.message;
          alertMessage.classList.remove('d-none');

          if (result.finalStatus === 'Cancel' || newStatus === 'Cancel') {
            disableControls();
          }

          setTimeout(() => {
            if (result.newRequestId) {
              window.location.href = `/workorder/${encodeURIComponent(result.newRequestId)}`;
            } else {
              location.reload();
            }
          }, 1200);
        } else {
          throw new Error(result.message || 'Update failed.');
        }
      } catch (error) {
        alertMessage.className = 'alert alert-danger alert-dismissible fade show mt-3';
        alertText.innerText = error.message || 'An unexpected error occurred.';
        alertMessage.classList.remove('d-none');
        updateBtn.disabled = false;
        updateBtn.innerHTML = originalText;
      }
    }

    // Update click
    updateBtn.addEventListener('click', () => {
      const selected = workStatusSelect.value;

      if (selected === 'Cancel') {
        // ====== CANCEL FLOW (เหมือนเดิม) ======
        const tbody = document.getElementById('cancelListBody');
        tbody.innerHTML = '';

        if (!cancelReturnItems || cancelReturnItems.length === 0) {
          tbody.innerHTML = `<tr><td class="text-center" colspan="4">ไม่มีรายการค้างคืน</td></tr>`;
        } else {
          cancelReturnItems.forEach((it, idx) => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td class="text-center">${idx + 1}</td>
              <td>${it.sku}</td>
              <td>${it.description || ''}</td>
              <td class="text-center">${it.qty}</td>`;
            tbody.appendChild(tr);
          });
        }

        const cancelModal = new bootstrap.Modal(document.getElementById('cancelConfirmModal'));
        cancelModal.show();

        document.getElementById('confirmCancelBtn').onclick = () => {
          cancelModal.hide();
          sendUpdate(false, { isCancel: true, returnItems: cancelReturnItems });
        };
        return;
      }

      // ====== PARTIAL RETURN (ใหม่) ======
      const returnItems = collectReturnItems();
      if (returnItems.length > 0) {
        const tbody = document.getElementById('returnListBody');
        tbody.innerHTML = '';
        returnItems.forEach((it, idx) => {
          const netNow = Number(it.net) || 0;             // ควรเป็นค่าติดลบหรือศูนย์
          const qtyRet = Number(it.quantity) || 0;        // จำนวนที่จะคืน (ถูก clamp ไว้แล้ว)
          const netAfter = Math.min(0, netNow + qtyRet);  // คืนแล้ว net จะขยับเข้าใกล้ 0 แต่ไม่เกิน 0

          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td class="text-center">${idx + 1}</td>
            <td>${it.sku}</td>
            <td>${it.description || ''}</td>
            <td class="text-center">${netNow}</td>
            <td class="text-center">${qtyRet}</td>
            <td class="text-center">${netAfter}</td>`;     <!-- ✅ เพิ่มคอลัมน์ -->
          tbody.appendChild(tr);
        });


        const returnModal = new bootstrap.Modal(document.getElementById('returnConfirmModal'));
        returnModal.show();

        document.getElementById('confirmReturnBtn').onclick = () => {
          returnModal.hide();
          const payload = {
            isReturn: true,
            returnItems: returnItems.map(x => ({ sku: x.sku, quantity: x.quantity }))
          };
          sendUpdate(false, payload);
        };
      } else {
        // ไม่มีการคืน → ทำงานเหมือนเดิม
        sendUpdate(false);
      }
    });

    // Duplicate flow confirm
    confirmDuplicateBtn.addEventListener('click', () => {
      if (duplicateModal) duplicateModal.hide();
      const returnItems = collectReturnItems();
      const extra = returnItems.length > 0
        ? { isReturn: true, returnItems: returnItems.map(x => ({ sku: x.sku, quantity: x.quantity })) }
        : {};
      sendUpdate(true, extra);
    });

    // On load & on status change: lock IDs if choosing Cancel; hard lock if already canceled
    document.addEventListener('DOMContentLoaded', function () {
      const defaultStatus = "<%= transactions[0]?.workStatus || 'Pending' %>";
      const isCancel = defaultStatus === 'Cancel';
      setCancelInputLock(isCancel);
      if (isCancel) disableControls();
    });
    workStatusSelect.addEventListener('change', (e) => {
      const isCancel = e.target.value === 'Cancel';
      setCancelInputLock(isCancel);
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
  
</body>

</html>
